import { getAllPosts } from "@/services/getPosts";
import { Metadata } from "next";

// для того, чтоб получить данные с сервера в динамических страницах делаем подобную функцию. Здесь мы пропсом уже принимает айди
const getData = async (id: string) => {
  // этот fetch не тот, который в браузере. это нодовский fetch, поэтому он работает чуть по другому
  const response = await fetch(
    `https://jsonplaceholder.typicode.com/posts/${id}`,
    {
      // специальный объект некста
      next: {
        // ввиду того, что запрос кешируется, это поле указывает на сколько секунд кеш будет работать, после чего запрос пройдет заново
        revalidate: 60,
      },
    }
  );
  return response.json();
};

interface PostProps {
  params: {
    // указываем название пропса как название папки
    id: string;
  };
}

// создаем функцию с зарезервированным именем, чтоб превратить компонент в статический (SSG). Тем самым, когда мы будем переходить из общего списка статей в какую-то конкретную, то у нас доп запросы на сервер отправлены не будут, т.к. это статика и она уже загружена. Но это несет за собой то, что пока мы не пересоберем проект, у нас не будут добавлены туда изменения. Эта функция выполнится только в процессе билда и в рантайме не выполнится.
export const generateStaticParams = async () => {
  const posts: any[] = await getAllPosts();

  return posts.map((post) => ({ slug: post.id.toString() }));
};

// export const metadata: Metadata = {
//   title: "About",
//   description: "Generated by create next app",
// };
// для динамических страниц метадата добавляется другим способом
// мы создаем функцию с таким названием и пропсами она будет принимать тоже самое.
export const generateMetadata = async (props: PostProps): Promise<Metadata> => {
  const {
    params: { id },
  } = props;

  // здесь мы достаем наш айди и назначаем его метатегу "title"
  // return { title: id };

  // если мы хотим в метадату добавить данные из запроса, то просто выполняем его здесь
  const post = await getData(id);

  return { title: post.title };
};

// при использовании динамических роутов мы можем принимать динамический параметр из урла (название как название папки)
const Post = async (props: PostProps) => {
  const {
    params: { id },
  } = props;

  // получаем один параграф
  const post = await getData(id);

  // если мы вызовем консоль здесь, то результат будет отображаться в терминале, а не в браузере
  // console.log(post)

  return (
    <>
      <h1>{post.title}</h1>
      <p>{post.body}</p>
    </>
  );
};

export default Post;
