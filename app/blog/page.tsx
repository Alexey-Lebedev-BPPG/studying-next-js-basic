import { PostSearch } from "@/components/PostSearch";
import { Posts } from "@/components/Posts";
import { Metadata } from "next";
import Link from "next/link";

// для того, чтоб получить данные с сервера делаем подобную функцию
const getData = async () => {
  // этот fetch не тот, который в браузере. это нодовский fetch, поэтому он работает чуть по другому
  const response = await fetch("https://jsonplaceholder.typicode.com/posts", {
    // специальный объект некста
    next: {
      // ввиду того, что запрос кешируется, это поле указывает на сколько секунд кеш будет работать, после чего запрос пройдет заново
      revalidate: 60,
    },
  });

  // обрабатываем ошибку при загрузке
  if (!response.ok) throw new Error("Unable to fetch posts!");

  return response.json();
};

// также добавление метадаты можно делать хоть для каждой страницы (кроме динамических страниц)
export const metadata: Metadata = {
  title: "Blog",
  description: "Generated by create next app",
};

// добавляем переменную, которая говорит делать обновление данных каждые 10 секунд и пересобирать страницы, в том числе динамические
const revalidate = 10;

// серверные компоненты могут быть асинхронными
const Blog = async () => {
  // получаем данные
  const posts = await getData();

  return (
    <>
      <h1>Blog page</h1>
      {/* используем в серверном компоненте два клиентских */}
      <PostSearch />
      <Posts />
    </>
  );
};

export default Blog;

// это один из вариантов использования клиентских компонентов в серверном (через swr). мы также можем использовать редакс, но тогда нужно создать провайдер, который будет оборачивать чилдрены в главном лайауте.
